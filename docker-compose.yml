x-bs-ppo-app-common: &bs-ppo-app-common
  volumes:
    - ./.logs/app/:/usr/local/src/logs
    - ./.env:/usr/local/src/.env
    - ./configs/config.yml:/usr/local/src/configs/config.yml
  depends_on:
    bs-ppo-postgres:
      condition: service_healthy
    bs-ppo-redis:
      condition: service_started
#    bs-ppo-mongo:
#      condition: service_started

x-bs-ppo-postgres-common: &bs-ppo-postgres-common
  environment:
    POSTGRES_USER: ${POSTGRES_USER}
    POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    POSTGRES_DB: ${POSTGRES_DB}
  healthcheck:
    test: [ "CMD-SHELL", "pg_isready -U postgres" ]
    interval: 5s
    timeout: 5s
    retries: 5

services:
  bs-ppo-app:
    <<: *bs-ppo-app-common
    image: booksmart:local
    container_name: bs-ppo-app
    ports:
      - "${APP_PORT}:8000"
    networks:
      - bs-ppo

  bs-ppo-app2:
    <<: *bs-ppo-app-common
    image: booksmart:local
    container_name: bs-ppo-app2
    ports:
      - "${APP_PORT_2}:8000"
    networks:
      - bs-ppo

  bs-ppo-app3:
    <<: *bs-ppo-app-common
    image: booksmart:local
    container_name: bs-ppo-app3
    ports:
      - "${APP_PORT_3}:8000"
    networks:
      - bs-ppo

  bs-ppo-postgres:
    <<: *bs-ppo-postgres-common
    image: postgres:latest
    container_name: bs-ppo-postgres
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - ./.data/postgres:/var/lib/postgresql/data
      - ${DB_DATASETS_PATH}:/data
    networks:
      - bs-ppo

  bs-ppo-postgres2: # slave
    <<: *bs-ppo-postgres-common
    image: postgres:latest
    container_name: bs-ppo-postgres2
    ports:
      - "${POSTGRES_PORT_2}:5432"
    volumes:
      - ./.data/postgres2:/var/lib/postgresql/data
      - ${DB_DATASETS_PATH}:/data
    networks:
      - bs-ppo

  bs-ppo-pgadmin:
    container_name: bs-ppo-pgadmin
    image: dpage/pgadmin4:latest
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    networks:
      - bs-ppo

  bs-ppo-mongo:
    container_name: bs-ppo-mongo
    image: mongo:latest
    ports:
      - "${MONGO_DB_PORT}:27017"
    volumes:
      - ${MONGO_MIGRATION_PATH}/rs-initiate.js:/docker-entrypoint-initdb.d/rs-initiate.js
      - ./.data/mongo/:/data/db/
    command: [ "--replSet", "dbrs-ppo", "--bind_ip_all" ]
    networks:
      - bs-ppo

  bs-ppo-redis:
    image: redis:latest
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_USER: ${REDIS_USER}
      REDIS_USER_PASSWORD: ${REDIS_USER_PASSWORD}
    command: >
      sh -c '
        mkdir -p /usr/local/etc/redis &&
        echo "requirepass $REDIS_PASSWORD" >> /usr/local/etc/redis/redis.conf &&
        echo "appendonly yes" >> /usr/local/etc/redis/redis.conf &&
        echo "appendfsync everysec" >> /usr/local/etc/redis/redis.conf &&
        echo "user default on nopass ~* +@all" > /usr/local/etc/redis/users.acl &&
        echo "user $REDIS_USER on >$REDIS_USER_PASSWORD ~* +@all" >> /usr/local/etc/redis/users.acl &&
        redis-server /usr/local/etc/redis/redis.conf --aclfile /usr/local/etc/redis/users.acl
      '
    container_name: bs-ppo-redis
    volumes:
      - ./.data/redis:/var/lib/redis
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - bs-ppo

  bs-ppo-nginx:
    image: nginx:latest
    container_name: bs-ppo-nginx
    ports:
      - "80:80"
    volumes:
      - ./.logs/nginx/:/var/log/nginx/
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      #      - ./components/component-ui/templates:/usr/share/nginx/html
      - ./components/component-ui/static:/usr/share/nginx/static
      - ./README.md:/usr/share/nginx/documentation/README.md
      - ./docs/diagrams:/usr/share/nginx/documentation/docs/diagrams
      - ./docs/readme.html:/usr/share/nginx/documentation/readme.html
      - ./docs/legacy.html:/usr/share/nginx/legacy/legacy.html
      - ./docs/tech-ui.zip:/usr/share/nginx/legacy/tech-ui.zip
    depends_on:
      - bs-ppo-app
    networks:
      - bs-ppo

networks:
  bs-ppo:
    driver: bridge