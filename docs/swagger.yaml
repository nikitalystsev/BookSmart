basePath: /
definitions:
  dto.AvgRatingOutputDTO:
    properties:
      avg_rating:
        type: number
    type: object
  dto.ErrorResponse:
    properties:
      error_msg:
        type: string
    type: object
  dto.FavoriteBookInputDTO:
    properties:
      book_id:
        type: string
    type: object
  dto.RatingInputDTO:
    properties:
      rating:
        type: integer
      reader_id:
        type: string
      review:
        type: string
    type: object
  dto.RatingOutputDTO:
    properties:
      rating:
        type: integer
      reader_fio:
        type: string
      review:
        type: string
    type: object
  dto.RefreshTokenInputDTO:
    properties:
      refresh_token:
        type: string
    type: object
  dto.RefreshTokenOutputDTO:
    properties:
      access_token:
        type: string
      expired_at:
        type: integer
      refresh_token:
        type: string
    type: object
  dto.ReservationExtentionPeriodDaysInputDTO:
    properties:
      extention_period_days:
        type: integer
    type: object
  dto.ReservationInputDTO:
    properties:
      book_id:
        type: string
    type: object
  dto.ReservationOutputDTO:
    properties:
      book_title_and_author:
        type: string
      id:
        type: string
      issue_date:
        type: string
      return_date:
        type: string
      state:
        type: string
    type: object
  dto.SignInInputDTO:
    properties:
      password:
        type: string
      phone_number:
        type: string
    type: object
  dto.SignInOutputDTO:
    properties:
      access_token:
        type: string
      expired_at:
        type: integer
      reader_id:
        type: string
      refresh_token:
        type: string
    type: object
  dto.SignUpInputDTO:
    properties:
      age:
        type: integer
      fio:
        type: string
      password:
        type: string
      phone_number:
        type: string
    type: object
  models.JSONBookModel:
    properties:
      age_limit:
        type: integer
      author:
        type: string
      copies_number:
        type: integer
      genre:
        type: string
      id:
        type: string
      language:
        type: string
      publisher:
        type: string
      publishing_year:
        type: integer
      rarity:
        type: string
      title:
        type: string
    type: object
  models.JSONLibCardModel:
    properties:
      action_status:
        type: boolean
      id:
        type: string
      issue_date:
        type: string
      lib_card_num:
        type: string
      reader_id:
        type: string
      validity:
        type: integer
    type: object
  models.JSONReaderModel:
    properties:
      age:
        type: integer
      fio:
        type: string
      id:
        type: string
      password:
        type: string
      phone_number:
        type: string
      role:
        type: string
    type: object
host: localhost:8000
info:
  contact: {}
  description: API Server for BookSmart Application
  title: BookSmart API
  version: "1.0"
paths:
  /auth/refresh:
    post:
      consumes:
      - application/json
      operationId: refresh
      parameters:
      - description: Токен обновления
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshTokenInputDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Успешное обновление токенов
          schema:
            $ref: '#/definitions/dto.RefreshTokenOutputDTO'
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Читателя не существует
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Метод обновления токенов
      tags:
      - auth
  /auth/sign-in:
    post:
      consumes:
      - application/json
      operationId: signIn
      parameters:
      - description: DTO c номером телефона и паролем пользователя
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.SignInInputDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Успешный вход пользователя
          schema:
            $ref: '#/definitions/dto.SignInOutputDTO'
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Читателя не существует
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "409":
          description: Неверный логин или пароль
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Метод аутентификации пользователя
      tags:
      - auth
  /auth/sign-up:
    post:
      consumes:
      - application/json
      operationId: signUp
      parameters:
      - description: DTO c данными пользователя
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.SignUpInputDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Успешное создание пользователя
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "409":
          description: Пользователь уже существует
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Метод регистрации пользователя
      tags:
      - auth
  /books:
    get:
      consumes:
      - application/json
      operationId: getPageBooks
      parameters:
      - description: Название книги
        in: query
        name: title
        type: string
      - description: Автор книги
        in: query
        name: author
        type: string
      - description: Издательство книги
        in: query
        name: publisher
        type: string
      - description: Редкость книги
        in: query
        name: rarity
        type: string
      - description: Жанр книги
        in: query
        name: genre
        type: string
      - description: Язык книги
        in: query
        name: language
        type: string
      - description: Количество копий
        in: query
        name: copies_number
        type: integer
      - description: Год издания
        in: query
        name: publishing_year
        type: integer
      - description: Возрастное ограничение
        in: query
        name: age_limit
        type: integer
      - description: Номер страницы для пагинации
        in: query
        name: page_number
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Список книг
          schema:
            items:
              $ref: '#/definitions/models.JSONBookModel'
            type: array
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Книги не найдены
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Метод получения книг по параметрам
      tags:
      - book
  /books/{id}:
    get:
      consumes:
      - application/json
      operationId: getBookByID
      parameters:
      - description: Идентификатор книги
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Успешное получение книги по идентификатору
          schema:
            $ref: '#/definitions/models.JSONBookModel'
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Книги нет
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Метод получения книги по идентификатору
      tags:
      - book
  /books/{id}/ratings:
    get:
      consumes:
      - application/json
      operationId: getRatingsByBookID
      parameters:
      - description: Идентификатор книги
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Успешное получение отзывов на книгу
          schema:
            items:
              $ref: '#/definitions/dto.RatingOutputDTO'
            type: array
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: У книги нет отзывов
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Метод получения рейтингов книги
      tags:
      - book_ratings
    post:
      consumes:
      - application/json
      operationId: addNewRating
      parameters:
      - description: Идентификатор книги
        in: path
        name: id
        required: true
        type: string
      - description: DTO с данными отзыва
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.RatingInputDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Успешное добавление отзыва
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Неавторизованный пользователь
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Пользователь никогда не бронировал книгу
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "409":
          description: Пользователь уже оценил книгу
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Метод добавления отзыва на книгу
      tags:
      - book_ratings
  /books/{id}/ratings/avg:
    get:
      consumes:
      - application/json
      operationId: getAvgRatingByBookID
      parameters:
      - description: Идентификатор книги
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Успешное получение среднего рейтинга книги
          schema:
            $ref: '#/definitions/dto.AvgRatingOutputDTO'
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: У книги нет отзывов
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Метод получения среднего рейтинга книги
      tags:
      - book_ratings
  /readers/{id}:
    get:
      consumes:
      - application/json
      operationId: getReaderByPhoneNumber
      parameters:
      - description: Идентификатор читателя
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Успешное получение читателя
          schema:
            $ref: '#/definitions/models.JSONReaderModel'
        "401":
          description: Неавторизованный пользователь
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Читатель не найден
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Метод получения читателя по идентификатору
      tags:
      - reader
  /readers/{id}/favorite_books:
    post:
      consumes:
      - application/json
      operationId: addBookToFavorites
      parameters:
      - description: Идентификатор читателя
        in: path
        name: id
        required: true
        type: string
      - description: Идентификатор книги
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.FavoriteBookInputDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Успешное добавление книги в избранное
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Неавторизованный пользователь
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Читатель не найден
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "409":
          description: ' Книга уже добавлена в избранное'
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Метод добавления книги в избранное
      tags:
      - reader
  /readers/{id}/lib_cards:
    get:
      consumes:
      - application/json
      operationId: getLibCardByReaderID
      parameters:
      - description: Идентификатор читателя
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Успешное получение читательского билета
          schema:
            items:
              $ref: '#/definitions/models.JSONLibCardModel'
            type: array
        "400":
          description: Некорректный идентификатор пользователя
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Неавторизованный пользователь
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Читательский билет не найден
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Метод получения читательского билета
      tags:
      - reader_lib_card
    post:
      consumes:
      - application/json
      operationId: createLibCard
      parameters:
      - description: Идентификатор читателя
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Успешное создание читательского билета
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Неавторизованный пользователь
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "409":
          description: Читательский билет уже существует
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Метод создания читательского билета
      tags:
      - reader_lib_card
    put:
      consumes:
      - application/json
      operationId: updateLibCard
      parameters:
      - description: Идентификатор читателя
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Успешное обновление читательского билета
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Неавторизованный пользователь
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Читательского билета не существует
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "409":
          description: Читательский билет актуален
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Метод обновления читательского билета
      tags:
      - reader_lib_card
  /readers/{id}/reservations:
    get:
      consumes:
      - application/json
      operationId: getReservationsByReaderID
      parameters:
      - description: Идентификатор читателя
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Успешное получение броней
          schema:
            items:
              $ref: '#/definitions/dto.ReservationOutputDTO'
            type: array
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Неавторизованный пользователь
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Нет броней
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Метод получения всех броней читателя
      tags:
      - reader_reservations
    post:
      consumes:
      - application/json
      operationId: reserveBook
      parameters:
      - description: Идентификатор читателя
        in: path
        name: id
        required: true
        type: string
      - description: Идентификатор книги
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.ReservationInputDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Успешное бронирование книги
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Неавторизованный пользователь
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Нет читательского билета или книги
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "409":
          description: Бронирование невозможно из-за нарушения некоторых условий
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Метод бронирования книги
      tags:
      - reader_reservations
  /readers/{id}/reservations/{reservation_id}:
    get:
      consumes:
      - application/json
      operationId: getReservationByID
      parameters:
      - description: Идентификатор читателя
        in: path
        name: id
        required: true
        type: string
      - description: Идентификатор брони
        in: path
        name: reservation_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Успешное получение брони
          schema:
            $ref: '#/definitions/dto.ReservationOutputDTO'
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Неавторизованный пользователь
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: ' Бронь не найдена'
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Метод получения брони читателя по идентификатору
      tags:
      - reader_reservations
    patch:
      consumes:
      - application/json
      operationId: updateReservation
      parameters:
      - description: Идентификатор читателя
        in: path
        name: id
        required: true
        type: string
      - description: Идентификатор брони
        in: path
        name: reservation_id
        required: true
        type: string
      - description: Срок продления брони
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.ReservationExtentionPeriodDaysInputDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Успешное продление брони
        "400":
          description: Неверный запрос
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Неавторизованный пользователь
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Бронь не найдена
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "409":
          description: Нарушение каких либо условий для успешного продления брони
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Метод обновления брони читателя по идентификатору
      tags:
      - reader_reservations
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
