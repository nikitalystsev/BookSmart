// Code generated by MockGen. DO NOT EDIT.
// Source: tokenManager.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockITokenManager is a mock of ITokenManager interface.
type MockITokenManager struct {
	ctrl     *gomock.Controller
	recorder *MockITokenManagerMockRecorder
}

// MockITokenManagerMockRecorder is the mock recorder for MockITokenManager.
type MockITokenManagerMockRecorder struct {
	mock *MockITokenManager
}

// NewMockITokenManager creates a new mock instance.
func NewMockITokenManager(ctrl *gomock.Controller) *MockITokenManager {
	mock := &MockITokenManager{ctrl: ctrl}
	mock.recorder = &MockITokenManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITokenManager) EXPECT() *MockITokenManagerMockRecorder {
	return m.recorder
}

// NewJWT mocks base method.
func (m *MockITokenManager) NewJWT(userID uuid.UUID, role string, ttl time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewJWT", userID, role, ttl)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewJWT indicates an expected call of NewJWT.
func (mr *MockITokenManagerMockRecorder) NewJWT(userID, role, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewJWT", reflect.TypeOf((*MockITokenManager)(nil).NewJWT), userID, role, ttl)
}

// NewRefreshToken mocks base method.
func (m *MockITokenManager) NewRefreshToken() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRefreshToken")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewRefreshToken indicates an expected call of NewRefreshToken.
func (mr *MockITokenManagerMockRecorder) NewRefreshToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRefreshToken", reflect.TypeOf((*MockITokenManager)(nil).NewRefreshToken))
}

// Parse mocks base method.
func (m *MockITokenManager) Parse(accessToken string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", accessToken)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Parse indicates an expected call of Parse.
func (mr *MockITokenManagerMockRecorder) Parse(accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockITokenManager)(nil).Parse), accessToken)
}
