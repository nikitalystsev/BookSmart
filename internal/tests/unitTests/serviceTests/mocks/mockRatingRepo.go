// Code generated by MockGen. DO NOT EDIT.
// Source: IRatingRepo.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	models "github.com/nikitalystsev/BookSmart-services/core/models"
)

// MockIRatingRepo is a mock of IRatingRepo interface.
type MockIRatingRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIRatingRepoMockRecorder
}

// MockIRatingRepoMockRecorder is the mock recorder for MockIRatingRepo.
type MockIRatingRepoMockRecorder struct {
	mock *MockIRatingRepo
}

// NewMockIRatingRepo creates a new mock instance.
func NewMockIRatingRepo(ctrl *gomock.Controller) *MockIRatingRepo {
	mock := &MockIRatingRepo{ctrl: ctrl}
	mock.recorder = &MockIRatingRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRatingRepo) EXPECT() *MockIRatingRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIRatingRepo) Create(ctx context.Context, rating *models.RatingModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, rating)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIRatingRepoMockRecorder) Create(ctx, rating interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIRatingRepo)(nil).Create), ctx, rating)
}

// GetByBookID mocks base method.
func (m *MockIRatingRepo) GetByBookID(ctx context.Context, bookID uuid.UUID) ([]*models.RatingModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByBookID", ctx, bookID)
	ret0, _ := ret[0].([]*models.RatingModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByBookID indicates an expected call of GetByBookID.
func (mr *MockIRatingRepoMockRecorder) GetByBookID(ctx, bookID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByBookID", reflect.TypeOf((*MockIRatingRepo)(nil).GetByBookID), ctx, bookID)
}

// GetByReaderAndBook mocks base method.
func (m *MockIRatingRepo) GetByReaderAndBook(ctx context.Context, readerID, bookID uuid.UUID) (*models.RatingModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByReaderAndBook", ctx, readerID, bookID)
	ret0, _ := ret[0].(*models.RatingModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByReaderAndBook indicates an expected call of GetByReaderAndBook.
func (mr *MockIRatingRepoMockRecorder) GetByReaderAndBook(ctx, readerID, bookID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByReaderAndBook", reflect.TypeOf((*MockIRatingRepo)(nil).GetByReaderAndBook), ctx, readerID, bookID)
}
