// Code generated by MockGen. DO NOT EDIT.
// Source: ./components/component-services/intfRepo/ILibCardRepo.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	models "github.com/nikitalystsev/BookSmart-services/core/models"
)

// MockILibCardRepo is a mock of ILibCardRepo interface.
type MockILibCardRepo struct {
	ctrl     *gomock.Controller
	recorder *MockILibCardRepoMockRecorder
}

// MockILibCardRepoMockRecorder is the mock recorder for MockILibCardRepo.
type MockILibCardRepoMockRecorder struct {
	mock *MockILibCardRepo
}

// NewMockILibCardRepo creates a new mock instance.
func NewMockILibCardRepo(ctrl *gomock.Controller) *MockILibCardRepo {
	mock := &MockILibCardRepo{ctrl: ctrl}
	mock.recorder = &MockILibCardRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILibCardRepo) EXPECT() *MockILibCardRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockILibCardRepo) Create(ctx context.Context, libCard *models.LibCardModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, libCard)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockILibCardRepoMockRecorder) Create(ctx, libCard interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockILibCardRepo)(nil).Create), ctx, libCard)
}

// GetByNum mocks base method.
func (m *MockILibCardRepo) GetByNum(ctx context.Context, libCardNum string) (*models.LibCardModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByNum", ctx, libCardNum)
	ret0, _ := ret[0].(*models.LibCardModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByNum indicates an expected call of GetByNum.
func (mr *MockILibCardRepoMockRecorder) GetByNum(ctx, libCardNum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByNum", reflect.TypeOf((*MockILibCardRepo)(nil).GetByNum), ctx, libCardNum)
}

// GetByReaderID mocks base method.
func (m *MockILibCardRepo) GetByReaderID(ctx context.Context, readerID uuid.UUID) (*models.LibCardModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByReaderID", ctx, readerID)
	ret0, _ := ret[0].(*models.LibCardModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByReaderID indicates an expected call of GetByReaderID.
func (mr *MockILibCardRepoMockRecorder) GetByReaderID(ctx, readerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByReaderID", reflect.TypeOf((*MockILibCardRepo)(nil).GetByReaderID), ctx, readerID)
}

// Update mocks base method.
func (m *MockILibCardRepo) Update(ctx context.Context, libCard *models.LibCardModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, libCard)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockILibCardRepoMockRecorder) Update(ctx, libCard interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockILibCardRepo)(nil).Update), ctx, libCard)
}
