// Code generated by MockGen. DO NOT EDIT.
// Source: passwordHasher.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIPasswordHasher is a mock of IPasswordHasher interface.
type MockIPasswordHasher struct {
	ctrl     *gomock.Controller
	recorder *MockIPasswordHasherMockRecorder
}

// MockIPasswordHasherMockRecorder is the mock recorder for MockIPasswordHasher.
type MockIPasswordHasherMockRecorder struct {
	mock *MockIPasswordHasher
}

// NewMockIPasswordHasher creates a new mock instance.
func NewMockIPasswordHasher(ctrl *gomock.Controller) *MockIPasswordHasher {
	mock := &MockIPasswordHasher{ctrl: ctrl}
	mock.recorder = &MockIPasswordHasherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPasswordHasher) EXPECT() *MockIPasswordHasherMockRecorder {
	return m.recorder
}

// Compare mocks base method.
func (m *MockIPasswordHasher) Compare(hashedPassword, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compare", hashedPassword, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// Compare indicates an expected call of Compare.
func (mr *MockIPasswordHasherMockRecorder) Compare(hashedPassword, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compare", reflect.TypeOf((*MockIPasswordHasher)(nil).Compare), hashedPassword, password)
}

// Hash mocks base method.
func (m *MockIPasswordHasher) Hash(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hash indicates an expected call of Hash.
func (mr *MockIPasswordHasherMockRecorder) Hash(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockIPasswordHasher)(nil).Hash), password)
}
