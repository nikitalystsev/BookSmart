// Code generated by MockGen. DO NOT EDIT.
// Source: IReaderRepo.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	models "BookSmart/internal/models"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockIReaderRepo is a mock of IReaderRepo interface.
type MockIReaderRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIReaderRepoMockRecorder
}

// MockIReaderRepoMockRecorder is the mock recorder for MockIReaderRepo.
type MockIReaderRepoMockRecorder struct {
	mock *MockIReaderRepo
}

// NewMockIReaderRepo creates a new mock instance.
func NewMockIReaderRepo(ctrl *gomock.Controller) *MockIReaderRepo {
	mock := &MockIReaderRepo{ctrl: ctrl}
	mock.recorder = &MockIReaderRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIReaderRepo) EXPECT() *MockIReaderRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIReaderRepo) Create(ctx context.Context, reader *models.ReaderModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, reader)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIReaderRepoMockRecorder) Create(ctx, reader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIReaderRepo)(nil).Create), ctx, reader)
}

// GetByID mocks base method.
func (m *MockIReaderRepo) GetByID(ctx context.Context, id uuid.UUID) (*models.ReaderModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.ReaderModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIReaderRepoMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIReaderRepo)(nil).GetByID), ctx, id)
}

// GetByPhoneNumber mocks base method.
func (m *MockIReaderRepo) GetByPhoneNumber(ctx context.Context, phoneNumber string) (*models.ReaderModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPhoneNumber", ctx, phoneNumber)
	ret0, _ := ret[0].(*models.ReaderModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPhoneNumber indicates an expected call of GetByPhoneNumber.
func (mr *MockIReaderRepoMockRecorder) GetByPhoneNumber(ctx, phoneNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPhoneNumber", reflect.TypeOf((*MockIReaderRepo)(nil).GetByPhoneNumber), ctx, phoneNumber)
}
