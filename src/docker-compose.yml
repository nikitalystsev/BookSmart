x-common-postgres: &common-postgres
  image: postgres:latest
  environment:
    POSTGRES_USER: ${POSTGRES_USER}
    POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    POSTGRES_DB: ${POSTGRES_DB}

x-redis: &redis
  image: redis:latest
  environment:
    REDIS_PASSWORD: ${REDIS_PASSWORD}
    REDIS_USER: ${REDIS_USER}
    REDIS_USER_PASSWORD: ${REDIS_USER_PASSWORD}
  command: >
    sh -c '
      mkdir -p /usr/local/etc/redis &&
      echo "requirepass $REDIS_PASSWORD" > /usr/local/etc/redis/redis.conf &&
      echo "appendonly yes" >> /usr/local/etc/redis/redis.conf &&
      echo "appendfsync everysec" >> /usr/local/etc/redis/redis.conf &&
      echo "user $REDIS_USER on >$REDIS_USER_PASSWORD ~* +@all" > /usr/local/etc/redis/users.acl &&
      redis-server /usr/local/etc/redis/redis.conf --aclfile /usr/local/etc/redis/users.acl
    '

services:
  bs-app:
    image: booksmart:local
    container_name: bs-app
    ports:
      - "8000:8000"
    depends_on:
      bs-mongo:
        condition: service_started
      bs-postgres:
        condition: service_healthy
      bs-redis:
        condition: service_started
    volumes:
      - ./.logs:/usr/local/src/.logs/
    networks:
      - bs

  bs-postgres:
    <<: *common-postgres
    container_name: bs-postgres
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - ./.data/postgres:/var/lib/postgresql/data
      - ${DB_DATASETS_PATH}:/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - bs

  bs-redis:
    <<: *redis
    container_name: bs-redis
    volumes:
      - ./.data/redis:/var/lib/redis
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - bs

  bs-mongo:
    container_name: bs-mongo
    image: mongo:latest
    expose:
      - 27017
    ports:
      - "27017:27017"
    volumes:
      - ./internal/repoMongo/impl/migrations/rs-initiate.js:/docker-entrypoint-initdb.d/rs-initiate.js
      - ./.data/mongo/:/data/db/
    command: [ "--replSet", "dbrs", "--bind_ip_all" ]
    networks:
      - bs

  bs-postgres-test:
    <<: *common-postgres
    container_name: bs-postgres-test
    ports:
      - "${POSTGRES_PORT_TEST}:5432"
    volumes:
      - ${DB_DATASETS_PATH}:/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - bs-test

  bs-redis-test:
    <<: *redis
    container_name: bs-redis-test
    ports:
      - "${REDIS_PORT_TEST}:6379"
    networks:
      - bs-test

networks:
  bs:
    driver: bridge
  bs-test:
    driver: bridge

# https://www.mongodb.com/community/forums/t/v-6-docker-one-node-replica-set/219245/5 -- откуда взял репликации (без них не работали транзакции в mongo)
#  log-influxdb:
#    image: influxdb:latest
#    environment:
#      DOCKER_INFLUXDB_INIT_MODE: setup
#      DOCKER_INFLUXDB_INIT_USERNAME: ${INFLUXDB_INIT_USERNAME}
#      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUXDB_INIT_PASSWORD}
#      DOCKER_INFLUXDB_INIT_ORG: ${INFLUXDB_INIT_ORG}
#      DOCKER_INFLUXDB_INIT_BUCKET: ${INFLUXDB_INIT_BUCKET}
#      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUXDB_INIT_ADMIN_TOKEN}
#    ports:
#      - "8086:8086"